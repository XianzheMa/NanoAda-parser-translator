/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.analysis;

import nada.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseANada(ANada node);
    void caseASubprogramBody(ASubprogramBody node);
    void caseADeclPart(ADeclPart node);
    void caseAObjDeclBasicDecl(AObjDeclBasicDecl node);
    void caseANumDeclBasicDecl(ANumDeclBasicDecl node);
    void caseASpbDeclBasicDecl(ASpbDeclBasicDecl node);
    void caseAObjectDecl(AObjectDecl node);
    void caseANumberDecl(ANumberDecl node);
    void caseAIdentList(AIdentList node);
    void caseAAnotherIdent(AAnotherIdent node);
    void caseAEnumTypedef(AEnumTypedef node);
    void caseASubprogramSpec(ASubprogramSpec node);
    void caseAFormalPart(AFormalPart node);
    void caseAParamSpec(AParamSpec node);
    void caseAAnotherParamSpec(AAnotherParamSpec node);
    void caseAStmtSeq(AStmtSeq node);
    void caseASimpleStmtStatement(ASimpleStmtStatement node);
    void caseACompoundStmtStatement(ACompoundStmtStatement node);
    void caseANullStmtSimpleStmt(ANullStmtSimpleStmt node);
    void caseAAssignStmtSimpleStmt(AAssignStmtSimpleStmt node);
    void caseAProcCallStmtSimpleStmt(AProcCallStmtSimpleStmt node);
    void caseAWriteSimpleStmt(AWriteSimpleStmt node);
    void caseAIfCompoundCompoundStmt(AIfCompoundCompoundStmt node);
    void caseALoopCompoundCompoundStmt(ALoopCompoundCompoundStmt node);
    void caseANullStmt(ANullStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseAWriteWriteStmt(AWriteWriteStmt node);
    void caseAWritelnWriteStmt(AWritelnWriteStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAElseifClause(AElseifClause node);
    void caseAElseClause(AElseClause node);
    void caseALoopStmt(ALoopStmt node);
    void caseAProcCallStmt(AProcCallStmt node);
    void caseAActualParamPart(AActualParamPart node);
    void caseAAnotherParam(AAnotherParam node);
    void caseARelation(ARelation node);
    void caseARelationClause(ARelationClause node);
    void caseAStringLitWriteExpr(AStringLitWriteExpr node);
    void caseASimpleExprWriteExpr(ASimpleExprWriteExpr node);
    void caseASimpleExpr(ASimpleExpr node);
    void caseATermSimpleExpr(ATermSimpleExpr node);
    void caseATerm(ATerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAFactorFactor(AFactorFactor node);
    void caseANegPrimFactor(ANegPrimFactor node);
    void caseANumLitPrimary(ANumLitPrimary node);
    void caseANamePrimary(ANamePrimary node);
    void caseAExprPrimary(AExprPrimary node);
    void caseAEqRelOp(AEqRelOp node);
    void caseANeqRelOp(ANeqRelOp node);
    void caseALtRelOp(ALtRelOp node);
    void caseALeRelOp(ALeRelOp node);
    void caseAGtRelOp(AGtRelOp node);
    void caseAGeRelOp(AGeRelOp node);
    void caseAPlusAddOp(APlusAddOp node);
    void caseAMinusAddOp(AMinusAddOp node);
    void caseAMultMulOp(AMultMulOp node);
    void caseADivMulOp(ADivMulOp node);
    void caseAModMulOp(AModMulOp node);

    void caseTWhitespace(TWhitespace node);
    void caseTProc(TProc node);
    void caseTNull(TNull node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTElseif(TElseif node);
    void caseTLoop(TLoop node);
    void caseTWhile(TWhile node);
    void caseTBegin(TBegin node);
    void caseTEnd(TEnd node);
    void caseTEndif(TEndif node);
    void caseTConst(TConst node);
    void caseTOut(TOut node);
    void caseTIs(TIs node);
    void caseTWrite(TWrite node);
    void caseTWriteln(TWriteln node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTDot(TDot node);
    void caseTSemi(TSemi node);
    void caseTColon(TColon node);
    void caseTComma(TComma node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLe(TLe node);
    void caseTGe(TGe node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTGets(TGets node);
    void caseTIdent(TIdent node);
    void caseTNumberLit(TNumberLit node);
    void caseTStringLit(TStringLit node);
    void caseTLinecmnt(TLinecmnt node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
