/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.analysis;

import java.util.*;
import nada.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPNada().apply(this);
        outStart(node);
    }

    public void inANada(ANada node)
    {
        defaultIn(node);
    }

    public void outANada(ANada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANada(ANada node)
    {
        inANada(node);
        if(node.getSubprogramBody() != null)
        {
            node.getSubprogramBody().apply(this);
        }
        outANada(node);
    }

    public void inASubprogramBody(ASubprogramBody node)
    {
        defaultIn(node);
    }

    public void outASubprogramBody(ASubprogramBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubprogramBody(ASubprogramBody node)
    {
        inASubprogramBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStmtSeq() != null)
        {
            node.getStmtSeq().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getDeclPart() != null)
        {
            node.getDeclPart().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getSubprogramSpec() != null)
        {
            node.getSubprogramSpec().apply(this);
        }
        outASubprogramBody(node);
    }

    public void inADeclPart(ADeclPart node)
    {
        defaultIn(node);
    }

    public void outADeclPart(ADeclPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclPart(ADeclPart node)
    {
        inADeclPart(node);
        {
            List<PBasicDecl> copy = new ArrayList<PBasicDecl>(node.getBasicDecl());
            Collections.reverse(copy);
            for(PBasicDecl e : copy)
            {
                e.apply(this);
            }
        }
        outADeclPart(node);
    }

    public void inAObjDeclBasicDecl(AObjDeclBasicDecl node)
    {
        defaultIn(node);
    }

    public void outAObjDeclBasicDecl(AObjDeclBasicDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjDeclBasicDecl(AObjDeclBasicDecl node)
    {
        inAObjDeclBasicDecl(node);
        if(node.getObjectDecl() != null)
        {
            node.getObjectDecl().apply(this);
        }
        outAObjDeclBasicDecl(node);
    }

    public void inANumDeclBasicDecl(ANumDeclBasicDecl node)
    {
        defaultIn(node);
    }

    public void outANumDeclBasicDecl(ANumDeclBasicDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumDeclBasicDecl(ANumDeclBasicDecl node)
    {
        inANumDeclBasicDecl(node);
        if(node.getNumberDecl() != null)
        {
            node.getNumberDecl().apply(this);
        }
        outANumDeclBasicDecl(node);
    }

    public void inASpbDeclBasicDecl(ASpbDeclBasicDecl node)
    {
        defaultIn(node);
    }

    public void outASpbDeclBasicDecl(ASpbDeclBasicDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpbDeclBasicDecl(ASpbDeclBasicDecl node)
    {
        inASpbDeclBasicDecl(node);
        if(node.getSubprogramBody() != null)
        {
            node.getSubprogramBody().apply(this);
        }
        outASpbDeclBasicDecl(node);
    }

    public void inAObjectDecl(AObjectDecl node)
    {
        defaultIn(node);
    }

    public void outAObjectDecl(AObjectDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectDecl(AObjectDecl node)
    {
        inAObjectDecl(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentList() != null)
        {
            node.getIdentList().apply(this);
        }
        outAObjectDecl(node);
    }

    public void inANumberDecl(ANumberDecl node)
    {
        defaultIn(node);
    }

    public void outANumberDecl(ANumberDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberDecl(ANumberDecl node)
    {
        inANumberDecl(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        if(node.getGets() != null)
        {
            node.getGets().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentList() != null)
        {
            node.getIdentList().apply(this);
        }
        outANumberDecl(node);
    }

    public void inAIdentList(AIdentList node)
    {
        defaultIn(node);
    }

    public void outAIdentList(AIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentList(AIdentList node)
    {
        inAIdentList(node);
        {
            List<PAnotherIdent> copy = new ArrayList<PAnotherIdent>(node.getAnotherIdent());
            Collections.reverse(copy);
            for(PAnotherIdent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentList(node);
    }

    public void inAAnotherIdent(AAnotherIdent node)
    {
        defaultIn(node);
    }

    public void outAAnotherIdent(AAnotherIdent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnotherIdent(AAnotherIdent node)
    {
        inAAnotherIdent(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAnotherIdent(node);
    }

    public void inAEnumTypedef(AEnumTypedef node)
    {
        defaultIn(node);
    }

    public void outAEnumTypedef(AEnumTypedef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumTypedef(AEnumTypedef node)
    {
        inAEnumTypedef(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getIdentList() != null)
        {
            node.getIdentList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAEnumTypedef(node);
    }

    public void inASubprogramSpec(ASubprogramSpec node)
    {
        defaultIn(node);
    }

    public void outASubprogramSpec(ASubprogramSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubprogramSpec(ASubprogramSpec node)
    {
        inASubprogramSpec(node);
        if(node.getFormalPart() != null)
        {
            node.getFormalPart().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getProc() != null)
        {
            node.getProc().apply(this);
        }
        outASubprogramSpec(node);
    }

    public void inAFormalPart(AFormalPart node)
    {
        defaultIn(node);
    }

    public void outAFormalPart(AFormalPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalPart(AFormalPart node)
    {
        inAFormalPart(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        {
            List<PAnotherParamSpec> copy = new ArrayList<PAnotherParamSpec>(node.getAnotherParamSpec());
            Collections.reverse(copy);
            for(PAnotherParamSpec e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParamSpec() != null)
        {
            node.getParamSpec().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAFormalPart(node);
    }

    public void inAParamSpec(AParamSpec node)
    {
        defaultIn(node);
    }

    public void outAParamSpec(AParamSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamSpec(AParamSpec node)
    {
        inAParamSpec(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getOut() != null)
        {
            node.getOut().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentList() != null)
        {
            node.getIdentList().apply(this);
        }
        outAParamSpec(node);
    }

    public void inAAnotherParamSpec(AAnotherParamSpec node)
    {
        defaultIn(node);
    }

    public void outAAnotherParamSpec(AAnotherParamSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnotherParamSpec(AAnotherParamSpec node)
    {
        inAAnotherParamSpec(node);
        if(node.getParamSpec() != null)
        {
            node.getParamSpec().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAnotherParamSpec(node);
    }

    public void inAStmtSeq(AStmtSeq node)
    {
        defaultIn(node);
    }

    public void outAStmtSeq(AStmtSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtSeq(AStmtSeq node)
    {
        inAStmtSeq(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatements());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStmtSeq(node);
    }

    public void inASimpleStmtStatement(ASimpleStmtStatement node)
    {
        defaultIn(node);
    }

    public void outASimpleStmtStatement(ASimpleStmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStmtStatement(ASimpleStmtStatement node)
    {
        inASimpleStmtStatement(node);
        if(node.getSimpleStmt() != null)
        {
            node.getSimpleStmt().apply(this);
        }
        outASimpleStmtStatement(node);
    }

    public void inACompoundStmtStatement(ACompoundStmtStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStmtStatement(ACompoundStmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmtStatement(ACompoundStmtStatement node)
    {
        inACompoundStmtStatement(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outACompoundStmtStatement(node);
    }

    public void inANullStmtSimpleStmt(ANullStmtSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outANullStmtSimpleStmt(ANullStmtSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullStmtSimpleStmt(ANullStmtSimpleStmt node)
    {
        inANullStmtSimpleStmt(node);
        if(node.getNullStmt() != null)
        {
            node.getNullStmt().apply(this);
        }
        outANullStmtSimpleStmt(node);
    }

    public void inAAssignStmtSimpleStmt(AAssignStmtSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmtSimpleStmt(AAssignStmtSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmtSimpleStmt(AAssignStmtSimpleStmt node)
    {
        inAAssignStmtSimpleStmt(node);
        if(node.getAssignStmt() != null)
        {
            node.getAssignStmt().apply(this);
        }
        outAAssignStmtSimpleStmt(node);
    }

    public void inAProcCallStmtSimpleStmt(AProcCallStmtSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAProcCallStmtSimpleStmt(AProcCallStmtSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcCallStmtSimpleStmt(AProcCallStmtSimpleStmt node)
    {
        inAProcCallStmtSimpleStmt(node);
        if(node.getProcCallStmt() != null)
        {
            node.getProcCallStmt().apply(this);
        }
        outAProcCallStmtSimpleStmt(node);
    }

    public void inAWriteSimpleStmt(AWriteSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAWriteSimpleStmt(AWriteSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteSimpleStmt(AWriteSimpleStmt node)
    {
        inAWriteSimpleStmt(node);
        if(node.getWriteStmt() != null)
        {
            node.getWriteStmt().apply(this);
        }
        outAWriteSimpleStmt(node);
    }

    public void inAIfCompoundCompoundStmt(AIfCompoundCompoundStmt node)
    {
        defaultIn(node);
    }

    public void outAIfCompoundCompoundStmt(AIfCompoundCompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCompoundCompoundStmt(AIfCompoundCompoundStmt node)
    {
        inAIfCompoundCompoundStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfCompoundCompoundStmt(node);
    }

    public void inALoopCompoundCompoundStmt(ALoopCompoundCompoundStmt node)
    {
        defaultIn(node);
    }

    public void outALoopCompoundCompoundStmt(ALoopCompoundCompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopCompoundCompoundStmt(ALoopCompoundCompoundStmt node)
    {
        inALoopCompoundCompoundStmt(node);
        if(node.getLoopStmt() != null)
        {
            node.getLoopStmt().apply(this);
        }
        outALoopCompoundCompoundStmt(node);
    }

    public void inANullStmt(ANullStmt node)
    {
        defaultIn(node);
    }

    public void outANullStmt(ANullStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullStmt(ANullStmt node)
    {
        inANullStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        if(node.getGets() != null)
        {
            node.getGets().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAWriteWriteStmt(AWriteWriteStmt node)
    {
        defaultIn(node);
    }

    public void outAWriteWriteStmt(AWriteWriteStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteWriteStmt(AWriteWriteStmt node)
    {
        inAWriteWriteStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getWriteExpr() != null)
        {
            node.getWriteExpr().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getWrite() != null)
        {
            node.getWrite().apply(this);
        }
        outAWriteWriteStmt(node);
    }

    public void inAWritelnWriteStmt(AWritelnWriteStmt node)
    {
        defaultIn(node);
    }

    public void outAWritelnWriteStmt(AWritelnWriteStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWritelnWriteStmt(AWritelnWriteStmt node)
    {
        inAWritelnWriteStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getWriteExpr() != null)
        {
            node.getWriteExpr().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getWriteln() != null)
        {
            node.getWriteln().apply(this);
        }
        outAWritelnWriteStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        if(node.getElseClause() != null)
        {
            node.getElseClause().apply(this);
        }
        {
            List<PElseifClause> copy = new ArrayList<PElseifClause>(node.getElseifClause());
            Collections.reverse(copy);
            for(PElseifClause e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStmtSeq() != null)
        {
            node.getStmtSeq().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRelation() != null)
        {
            node.getRelation().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAElseifClause(AElseifClause node)
    {
        defaultIn(node);
    }

    public void outAElseifClause(AElseifClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseifClause(AElseifClause node)
    {
        inAElseifClause(node);
        if(node.getStmtSeq() != null)
        {
            node.getStmtSeq().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRelation() != null)
        {
            node.getRelation().apply(this);
        }
        if(node.getElseif() != null)
        {
            node.getElseif().apply(this);
        }
        outAElseifClause(node);
    }

    public void inAElseClause(AElseClause node)
    {
        defaultIn(node);
    }

    public void outAElseClause(AElseClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseClause(AElseClause node)
    {
        inAElseClause(node);
        if(node.getStmtSeq() != null)
        {
            node.getStmtSeq().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseClause(node);
    }

    public void inALoopStmt(ALoopStmt node)
    {
        defaultIn(node);
    }

    public void outALoopStmt(ALoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStmt(ALoopStmt node)
    {
        inALoopStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getLoopEnd() != null)
        {
            node.getLoopEnd().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStmtSeq() != null)
        {
            node.getStmtSeq().apply(this);
        }
        if(node.getLoopStart() != null)
        {
            node.getLoopStart().apply(this);
        }
        if(node.getRelation() != null)
        {
            node.getRelation().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outALoopStmt(node);
    }

    public void inAProcCallStmt(AProcCallStmt node)
    {
        defaultIn(node);
    }

    public void outAProcCallStmt(AProcCallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcCallStmt(AProcCallStmt node)
    {
        inAProcCallStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getActualParamPart() != null)
        {
            node.getActualParamPart().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAProcCallStmt(node);
    }

    public void inAActualParamPart(AActualParamPart node)
    {
        defaultIn(node);
    }

    public void outAActualParamPart(AActualParamPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActualParamPart(AActualParamPart node)
    {
        inAActualParamPart(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        {
            List<PAnotherParam> copy = new ArrayList<PAnotherParam>(node.getAnotherParam());
            Collections.reverse(copy);
            for(PAnotherParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAActualParamPart(node);
    }

    public void inAAnotherParam(AAnotherParam node)
    {
        defaultIn(node);
    }

    public void outAAnotherParam(AAnotherParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnotherParam(AAnotherParam node)
    {
        inAAnotherParam(node);
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAnotherParam(node);
    }

    public void inARelation(ARelation node)
    {
        defaultIn(node);
    }

    public void outARelation(ARelation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelation(ARelation node)
    {
        inARelation(node);
        if(node.getRelationClause() != null)
        {
            node.getRelationClause().apply(this);
        }
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        outARelation(node);
    }

    public void inARelationClause(ARelationClause node)
    {
        defaultIn(node);
    }

    public void outARelationClause(ARelationClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationClause(ARelationClause node)
    {
        inARelationClause(node);
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        if(node.getRelOp() != null)
        {
            node.getRelOp().apply(this);
        }
        outARelationClause(node);
    }

    public void inAStringLitWriteExpr(AStringLitWriteExpr node)
    {
        defaultIn(node);
    }

    public void outAStringLitWriteExpr(AStringLitWriteExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLitWriteExpr(AStringLitWriteExpr node)
    {
        inAStringLitWriteExpr(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
        }
        outAStringLitWriteExpr(node);
    }

    public void inASimpleExprWriteExpr(ASimpleExprWriteExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleExprWriteExpr(ASimpleExprWriteExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprWriteExpr(ASimpleExprWriteExpr node)
    {
        inASimpleExprWriteExpr(node);
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        outASimpleExprWriteExpr(node);
    }

    public void inASimpleExpr(ASimpleExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleExpr(ASimpleExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpr(ASimpleExpr node)
    {
        inASimpleExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAddOp() != null)
        {
            node.getAddOp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASimpleExpr(node);
    }

    public void inATermSimpleExpr(ATermSimpleExpr node)
    {
        defaultIn(node);
    }

    public void outATermSimpleExpr(ATermSimpleExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermSimpleExpr(ATermSimpleExpr node)
    {
        inATermSimpleExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermSimpleExpr(node);
    }

    public void inATerm(ATerm node)
    {
        defaultIn(node);
    }

    public void outATerm(ATerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm(ATerm node)
    {
        inATerm(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMulOp() != null)
        {
            node.getMulOp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outATerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAFactorFactor(AFactorFactor node)
    {
        defaultIn(node);
    }

    public void outAFactorFactor(AFactorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorFactor(AFactorFactor node)
    {
        inAFactorFactor(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAFactorFactor(node);
    }

    public void inANegPrimFactor(ANegPrimFactor node)
    {
        defaultIn(node);
    }

    public void outANegPrimFactor(ANegPrimFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegPrimFactor(ANegPrimFactor node)
    {
        inANegPrimFactor(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegPrimFactor(node);
    }

    public void inANumLitPrimary(ANumLitPrimary node)
    {
        defaultIn(node);
    }

    public void outANumLitPrimary(ANumLitPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumLitPrimary(ANumLitPrimary node)
    {
        inANumLitPrimary(node);
        if(node.getNumberLit() != null)
        {
            node.getNumberLit().apply(this);
        }
        outANumLitPrimary(node);
    }

    public void inANamePrimary(ANamePrimary node)
    {
        defaultIn(node);
    }

    public void outANamePrimary(ANamePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePrimary(ANamePrimary node)
    {
        inANamePrimary(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outANamePrimary(node);
    }

    public void inAExprPrimary(AExprPrimary node)
    {
        defaultIn(node);
    }

    public void outAExprPrimary(AExprPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPrimary(AExprPrimary node)
    {
        inAExprPrimary(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getSimpleExpr() != null)
        {
            node.getSimpleExpr().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAExprPrimary(node);
    }

    public void inAEqRelOp(AEqRelOp node)
    {
        defaultIn(node);
    }

    public void outAEqRelOp(AEqRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqRelOp(AEqRelOp node)
    {
        inAEqRelOp(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqRelOp(node);
    }

    public void inANeqRelOp(ANeqRelOp node)
    {
        defaultIn(node);
    }

    public void outANeqRelOp(ANeqRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqRelOp(ANeqRelOp node)
    {
        inANeqRelOp(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqRelOp(node);
    }

    public void inALtRelOp(ALtRelOp node)
    {
        defaultIn(node);
    }

    public void outALtRelOp(ALtRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtRelOp(ALtRelOp node)
    {
        inALtRelOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtRelOp(node);
    }

    public void inALeRelOp(ALeRelOp node)
    {
        defaultIn(node);
    }

    public void outALeRelOp(ALeRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeRelOp(ALeRelOp node)
    {
        inALeRelOp(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeRelOp(node);
    }

    public void inAGtRelOp(AGtRelOp node)
    {
        defaultIn(node);
    }

    public void outAGtRelOp(AGtRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtRelOp(AGtRelOp node)
    {
        inAGtRelOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtRelOp(node);
    }

    public void inAGeRelOp(AGeRelOp node)
    {
        defaultIn(node);
    }

    public void outAGeRelOp(AGeRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeRelOp(AGeRelOp node)
    {
        inAGeRelOp(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeRelOp(node);
    }

    public void inAPlusAddOp(APlusAddOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAddOp(APlusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddOp(APlusAddOp node)
    {
        inAPlusAddOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddOp(node);
    }

    public void inAMinusAddOp(AMinusAddOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAddOp(AMinusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddOp(AMinusAddOp node)
    {
        inAMinusAddOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddOp(node);
    }

    public void inAMultMulOp(AMultMulOp node)
    {
        defaultIn(node);
    }

    public void outAMultMulOp(AMultMulOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMulOp(AMultMulOp node)
    {
        inAMultMulOp(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMulOp(node);
    }

    public void inADivMulOp(ADivMulOp node)
    {
        defaultIn(node);
    }

    public void outADivMulOp(ADivMulOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMulOp(ADivMulOp node)
    {
        inADivMulOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMulOp(node);
    }

    public void inAModMulOp(AModMulOp node)
    {
        defaultIn(node);
    }

    public void outAModMulOp(AModMulOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModMulOp(AModMulOp node)
    {
        inAModMulOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModMulOp(node);
    }
}
