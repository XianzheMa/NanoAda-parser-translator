/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.parser;

import nada.lexer.*;
import nada.node.*;
import nada.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PNada node1 = (PNada) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ANada */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAsubprogrambody1SubprogramBody */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAsubprogrambody2SubprogramBody */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAdeclpart1DeclPart */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAdeclpart2DeclPart */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AObjDeclBasicDecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ANumDeclBasicDecl */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ASpbDeclBasicDecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AObjectDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ANumberDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AAidentlist1IdentList */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AAidentlist2IdentList */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AAnotherIdent */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AEnumTypedef */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce AAsubprogramspec1SubprogramSpec */
            {
                ArrayList<Object> list = new14();
                push(goTo(9), list, false);
            }
            break;
            case 15: /* reduce AAsubprogramspec2SubprogramSpec */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list, false);
            }
            break;
            case 16: /* reduce AAformalpart1FormalPart */
            {
                ArrayList<Object> list = new16();
                push(goTo(10), list, false);
            }
            break;
            case 17: /* reduce AAformalpart2FormalPart */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list, false);
            }
            break;
            case 18: /* reduce AAparamspec1ParamSpec */
            {
                ArrayList<Object> list = new18();
                push(goTo(11), list, false);
            }
            break;
            case 19: /* reduce AAparamspec2ParamSpec */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce AAnotherParamSpec */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list, false);
            }
            break;
            case 21: /* reduce AAstmtseq1StmtSeq */
            {
                ArrayList<Object> list = new21();
                push(goTo(13), list, false);
            }
            break;
            case 22: /* reduce AAstmtseq2StmtSeq */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list, false);
            }
            break;
            case 23: /* reduce ASimpleStmtStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(14), list, false);
            }
            break;
            case 24: /* reduce ACompoundStmtStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(14), list, false);
            }
            break;
            case 25: /* reduce ANullStmtSimpleStmt */
            {
                ArrayList<Object> list = new25();
                push(goTo(15), list, false);
            }
            break;
            case 26: /* reduce AAssignStmtSimpleStmt */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list, false);
            }
            break;
            case 27: /* reduce AProcCallStmtSimpleStmt */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list, false);
            }
            break;
            case 28: /* reduce AWriteSimpleStmt */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce AIfCompoundCompoundStmt */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce ALoopCompoundCompoundStmt */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list, false);
            }
            break;
            case 31: /* reduce ANullStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list, false);
            }
            break;
            case 32: /* reduce AAssignStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list, false);
            }
            break;
            case 33: /* reduce AAwritewritestmt1WriteStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list, false);
            }
            break;
            case 34: /* reduce AAwritewritestmt2WriteStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list, false);
            }
            break;
            case 35: /* reduce AAwritelnwritestmt1WriteStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(19), list, false);
            }
            break;
            case 36: /* reduce AAwritelnwritestmt2WriteStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(19), list, false);
            }
            break;
            case 37: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, false);
            }
            break;
            case 38: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list, false);
            }
            break;
            case 39: /* reduce AAifstmt3IfStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(20), list, false);
            }
            break;
            case 40: /* reduce AAifstmt4IfStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list, false);
            }
            break;
            case 41: /* reduce AElseifClause */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list, false);
            }
            break;
            case 42: /* reduce AElseClause */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new43();
                push(goTo(23), list, false);
            }
            break;
            case 44: /* reduce AAproccallstmt1ProcCallStmt */
            {
                ArrayList<Object> list = new44();
                push(goTo(24), list, false);
            }
            break;
            case 45: /* reduce AAproccallstmt2ProcCallStmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(24), list, false);
            }
            break;
            case 46: /* reduce AAactualparampart1ActualParamPart */
            {
                ArrayList<Object> list = new46();
                push(goTo(25), list, false);
            }
            break;
            case 47: /* reduce AAactualparampart2ActualParamPart */
            {
                ArrayList<Object> list = new47();
                push(goTo(25), list, false);
            }
            break;
            case 48: /* reduce AAnotherParam */
            {
                ArrayList<Object> list = new48();
                push(goTo(26), list, false);
            }
            break;
            case 49: /* reduce AArelation1Relation */
            {
                ArrayList<Object> list = new49();
                push(goTo(27), list, false);
            }
            break;
            case 50: /* reduce AArelation2Relation */
            {
                ArrayList<Object> list = new50();
                push(goTo(27), list, false);
            }
            break;
            case 51: /* reduce ARelationClause */
            {
                ArrayList<Object> list = new51();
                push(goTo(28), list, false);
            }
            break;
            case 52: /* reduce AStringLitWriteExpr */
            {
                ArrayList<Object> list = new52();
                push(goTo(29), list, false);
            }
            break;
            case 53: /* reduce ASimpleExprWriteExpr */
            {
                ArrayList<Object> list = new53();
                push(goTo(29), list, false);
            }
            break;
            case 54: /* reduce ASimpleExpr */
            {
                ArrayList<Object> list = new54();
                push(goTo(30), list, false);
            }
            break;
            case 55: /* reduce ATermSimpleExpr */
            {
                ArrayList<Object> list = new55();
                push(goTo(30), list, false);
            }
            break;
            case 56: /* reduce ATerm */
            {
                ArrayList<Object> list = new56();
                push(goTo(31), list, false);
            }
            break;
            case 57: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new57();
                push(goTo(31), list, false);
            }
            break;
            case 58: /* reduce AFactorFactor */
            {
                ArrayList<Object> list = new58();
                push(goTo(32), list, false);
            }
            break;
            case 59: /* reduce ANegPrimFactor */
            {
                ArrayList<Object> list = new59();
                push(goTo(32), list, false);
            }
            break;
            case 60: /* reduce ANumLitPrimary */
            {
                ArrayList<Object> list = new60();
                push(goTo(33), list, false);
            }
            break;
            case 61: /* reduce ANamePrimary */
            {
                ArrayList<Object> list = new61();
                push(goTo(33), list, false);
            }
            break;
            case 62: /* reduce AExprPrimary */
            {
                ArrayList<Object> list = new62();
                push(goTo(33), list, false);
            }
            break;
            case 63: /* reduce AEqRelOp */
            {
                ArrayList<Object> list = new63();
                push(goTo(34), list, false);
            }
            break;
            case 64: /* reduce ANeqRelOp */
            {
                ArrayList<Object> list = new64();
                push(goTo(34), list, false);
            }
            break;
            case 65: /* reduce ALtRelOp */
            {
                ArrayList<Object> list = new65();
                push(goTo(34), list, false);
            }
            break;
            case 66: /* reduce ALeRelOp */
            {
                ArrayList<Object> list = new66();
                push(goTo(34), list, false);
            }
            break;
            case 67: /* reduce AGtRelOp */
            {
                ArrayList<Object> list = new67();
                push(goTo(34), list, false);
            }
            break;
            case 68: /* reduce AGeRelOp */
            {
                ArrayList<Object> list = new68();
                push(goTo(34), list, false);
            }
            break;
            case 69: /* reduce APlusAddOp */
            {
                ArrayList<Object> list = new69();
                push(goTo(35), list, false);
            }
            break;
            case 70: /* reduce AMinusAddOp */
            {
                ArrayList<Object> list = new70();
                push(goTo(35), list, false);
            }
            break;
            case 71: /* reduce AMultMulOp */
            {
                ArrayList<Object> list = new71();
                push(goTo(36), list, false);
            }
            break;
            case 72: /* reduce ADivMulOp */
            {
                ArrayList<Object> list = new72();
                push(goTo(36), list, false);
            }
            break;
            case 73: /* reduce AModMulOp */
            {
                ArrayList<Object> list = new73();
                push(goTo(36), list, false);
            }
            break;
            case 74: /* reduce ATerminal$BasicDecl */
            {
                ArrayList<Object> list = new74();
                push(goTo(37), list, true);
            }
            break;
            case 75: /* reduce ANonTerminal$BasicDecl */
            {
                ArrayList<Object> list = new75();
                push(goTo(37), list, true);
            }
            break;
            case 76: /* reduce ATerminal$AnotherIdent */
            {
                ArrayList<Object> list = new76();
                push(goTo(38), list, true);
            }
            break;
            case 77: /* reduce ANonTerminal$AnotherIdent */
            {
                ArrayList<Object> list = new77();
                push(goTo(38), list, true);
            }
            break;
            case 78: /* reduce ATerminal$AnotherParamSpec */
            {
                ArrayList<Object> list = new78();
                push(goTo(39), list, true);
            }
            break;
            case 79: /* reduce ANonTerminal$AnotherParamSpec */
            {
                ArrayList<Object> list = new79();
                push(goTo(39), list, true);
            }
            break;
            case 80: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new80();
                push(goTo(40), list, true);
            }
            break;
            case 81: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new81();
                push(goTo(40), list, true);
            }
            break;
            case 82: /* reduce ATerminal$ElseifClause */
            {
                ArrayList<Object> list = new82();
                push(goTo(41), list, true);
            }
            break;
            case 83: /* reduce ANonTerminal$ElseifClause */
            {
                ArrayList<Object> list = new83();
                push(goTo(41), list, true);
            }
            break;
            case 84: /* reduce ATerminal$AnotherParam */
            {
                ArrayList<Object> list = new84();
                push(goTo(42), list, true);
            }
            break;
            case 85: /* reduce ANonTerminal$AnotherParam */
            {
                ArrayList<Object> list = new85();
                push(goTo(42), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ANada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNada pnadaNode1;
        {
            // Block
        PSubprogramBody psubprogrambodyNode2;
        psubprogrambodyNode2 = (PSubprogramBody)nodeArrayList1.get(0);

        pnadaNode1 = new ANada(psubprogrambodyNode2);
        }
	nodeList.add(pnadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAsubprogrambody1SubprogramBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubprogramBody psubprogrambodyNode1;
        {
            // Block
        PSubprogramSpec psubprogramspecNode2;
        TIs tisNode3;
        PDeclPart pdeclpartNode4;
        TBegin tbeginNode5;
        PStmtSeq pstmtseqNode6;
        TEnd tendNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TSemi tsemiNode9;
        psubprogramspecNode2 = (PSubprogramSpec)nodeArrayList1.get(0);
        tisNode3 = (TIs)nodeArrayList2.get(0);
        pdeclpartNode4 = (PDeclPart)nodeArrayList3.get(0);
        tbeginNode5 = (TBegin)nodeArrayList4.get(0);
        pstmtseqNode6 = (PStmtSeq)nodeArrayList5.get(0);
        tendNode7 = (TEnd)nodeArrayList6.get(0);
        tsemiNode9 = (TSemi)nodeArrayList7.get(0);

        psubprogrambodyNode1 = new ASubprogramBody(psubprogramspecNode2, tisNode3, pdeclpartNode4, tbeginNode5, pstmtseqNode6, tendNode7, null, tsemiNode9);
        }
	nodeList.add(psubprogrambodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAsubprogrambody2SubprogramBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubprogramBody psubprogrambodyNode1;
        {
            // Block
        PSubprogramSpec psubprogramspecNode2;
        TIs tisNode3;
        PDeclPart pdeclpartNode4;
        TBegin tbeginNode5;
        PStmtSeq pstmtseqNode6;
        TEnd tendNode7;
        TIdent tidentNode8;
        TSemi tsemiNode9;
        psubprogramspecNode2 = (PSubprogramSpec)nodeArrayList1.get(0);
        tisNode3 = (TIs)nodeArrayList2.get(0);
        pdeclpartNode4 = (PDeclPart)nodeArrayList3.get(0);
        tbeginNode5 = (TBegin)nodeArrayList4.get(0);
        pstmtseqNode6 = (PStmtSeq)nodeArrayList5.get(0);
        tendNode7 = (TEnd)nodeArrayList6.get(0);
        tidentNode8 = (TIdent)nodeArrayList7.get(0);
        tsemiNode9 = (TSemi)nodeArrayList8.get(0);

        psubprogrambodyNode1 = new ASubprogramBody(psubprogramspecNode2, tisNode3, pdeclpartNode4, tbeginNode5, pstmtseqNode6, tendNode7, tidentNode8, tsemiNode9);
        }
	nodeList.add(psubprogrambodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAdeclpart1DeclPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclPart pdeclpartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pdeclpartNode1 = new ADeclPart(listNode2);
        }
	nodeList.add(pdeclpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdeclpart2DeclPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclPart pdeclpartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdeclpartNode1 = new ADeclPart(listNode3);
        }
	nodeList.add(pdeclpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AObjDeclBasicDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicDecl pbasicdeclNode1;
        {
            // Block
        PObjectDecl pobjectdeclNode2;
        pobjectdeclNode2 = (PObjectDecl)nodeArrayList1.get(0);

        pbasicdeclNode1 = new AObjDeclBasicDecl(pobjectdeclNode2);
        }
	nodeList.add(pbasicdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANumDeclBasicDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicDecl pbasicdeclNode1;
        {
            // Block
        PNumberDecl pnumberdeclNode2;
        pnumberdeclNode2 = (PNumberDecl)nodeArrayList1.get(0);

        pbasicdeclNode1 = new ANumDeclBasicDecl(pnumberdeclNode2);
        }
	nodeList.add(pbasicdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASpbDeclBasicDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicDecl pbasicdeclNode1;
        {
            // Block
        PSubprogramBody psubprogrambodyNode2;
        psubprogrambodyNode2 = (PSubprogramBody)nodeArrayList1.get(0);

        pbasicdeclNode1 = new ASpbDeclBasicDecl(psubprogrambodyNode2);
        }
	nodeList.add(pbasicdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AObjectDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObjectDecl pobjectdeclNode1;
        {
            // Block
        PIdentList pidentlistNode2;
        TColon tcolonNode3;
        TIdent tidentNode4;
        TSemi tsemiNode5;
        pidentlistNode2 = (PIdentList)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pobjectdeclNode1 = new AObjectDecl(pidentlistNode2, tcolonNode3, tidentNode4, tsemiNode5);
        }
	nodeList.add(pobjectdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ANumberDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumberDecl pnumberdeclNode1;
        {
            // Block
        PIdentList pidentlistNode2;
        TColon tcolonNode3;
        TConst tconstNode4;
        TGets tgetsNode5;
        PSimpleExpr psimpleexprNode6;
        TSemi tsemiNode7;
        pidentlistNode2 = (PIdentList)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        tconstNode4 = (TConst)nodeArrayList3.get(0);
        tgetsNode5 = (TGets)nodeArrayList4.get(0);
        psimpleexprNode6 = (PSimpleExpr)nodeArrayList5.get(0);
        tsemiNode7 = (TSemi)nodeArrayList6.get(0);

        pnumberdeclNode1 = new ANumberDecl(pidentlistNode2, tcolonNode3, tconstNode4, tgetsNode5, psimpleexprNode6, tsemiNode7);
        }
	nodeList.add(pnumberdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAidentlist1IdentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentList pidentlistNode1;
        {
            // Block
        TIdent tidentNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        {
            // Block
        }

        pidentlistNode1 = new AIdentList(tidentNode2, listNode3);
        }
	nodeList.add(pidentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAidentlist2IdentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentList pidentlistNode1;
        {
            // Block
        TIdent tidentNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pidentlistNode1 = new AIdentList(tidentNode2, listNode4);
        }
	nodeList.add(pidentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAnotherIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAnotherIdent panotheridentNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdent tidentNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        panotheridentNode1 = new AAnotherIdent(tcommaNode2, tidentNode3);
        }
	nodeList.add(panotheridentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AEnumTypedef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEnumTypedef penumtypedefNode1;
        {
            // Block
        TLParen tlparenNode2;
        PIdentList pidentlistNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pidentlistNode3 = (PIdentList)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        penumtypedefNode1 = new AEnumTypedef(tlparenNode2, pidentlistNode3, trparenNode4);
        }
	nodeList.add(penumtypedefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAsubprogramspec1SubprogramSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubprogramSpec psubprogramspecNode1;
        {
            // Block
        TProc tprocNode2;
        TIdent tidentNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tprocNode2 = (TProc)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        psubprogramspecNode1 = new ASubprogramSpec(tprocNode2, tidentNode3, null);
        }
	nodeList.add(psubprogramspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAsubprogramspec2SubprogramSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubprogramSpec psubprogramspecNode1;
        {
            // Block
        TProc tprocNode2;
        TIdent tidentNode3;
        PFormalPart pformalpartNode4;
        tprocNode2 = (TProc)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        pformalpartNode4 = (PFormalPart)nodeArrayList3.get(0);

        psubprogramspecNode1 = new ASubprogramSpec(tprocNode2, tidentNode3, pformalpartNode4);
        }
	nodeList.add(psubprogramspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAformalpart1FormalPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalPart pformalpartNode1;
        {
            // Block
        TLParen tlparenNode2;
        PParamSpec pparamspecNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRParen trparenNode5;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pparamspecNode3 = (PParamSpec)nodeArrayList2.get(0);
        {
            // Block
        }
        trparenNode5 = (TRParen)nodeArrayList3.get(0);

        pformalpartNode1 = new AFormalPart(tlparenNode2, pparamspecNode3, listNode4, trparenNode5);
        }
	nodeList.add(pformalpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAformalpart2FormalPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalPart pformalpartNode1;
        {
            // Block
        TLParen tlparenNode2;
        PParamSpec pparamspecNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRParen trparenNode6;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pparamspecNode3 = (PParamSpec)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparenNode6 = (TRParen)nodeArrayList4.get(0);

        pformalpartNode1 = new AFormalPart(tlparenNode2, pparamspecNode3, listNode5, trparenNode6);
        }
	nodeList.add(pformalpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAparamspec1ParamSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamSpec pparamspecNode1;
        {
            // Block
        PIdentList pidentlistNode2;
        TColon tcolonNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIdent tidentNode5;
        pidentlistNode2 = (PIdentList)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        tidentNode5 = (TIdent)nodeArrayList3.get(0);

        pparamspecNode1 = new AParamSpec(pidentlistNode2, tcolonNode3, null, tidentNode5);
        }
	nodeList.add(pparamspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAparamspec2ParamSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamSpec pparamspecNode1;
        {
            // Block
        PIdentList pidentlistNode2;
        TColon tcolonNode3;
        TOut toutNode4;
        TIdent tidentNode5;
        pidentlistNode2 = (PIdentList)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        toutNode4 = (TOut)nodeArrayList3.get(0);
        tidentNode5 = (TIdent)nodeArrayList4.get(0);

        pparamspecNode1 = new AParamSpec(pidentlistNode2, tcolonNode3, toutNode4, tidentNode5);
        }
	nodeList.add(pparamspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAnotherParamSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAnotherParamSpec panotherparamspecNode1;
        {
            // Block
        TComma tcommaNode2;
        PParamSpec pparamspecNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamspecNode3 = (PParamSpec)nodeArrayList2.get(0);

        panotherparamspecNode1 = new AAnotherParamSpec(tcommaNode2, pparamspecNode3);
        }
	nodeList.add(panotherparamspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAstmtseq1StmtSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtSeq pstmtseqNode1;
        {
            // Block
        PStatement pstatementNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        {
            // Block
        }

        pstmtseqNode1 = new AStmtSeq(pstatementNode2, listNode3);
        }
	nodeList.add(pstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAstmtseq2StmtSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtSeq pstmtseqNode1;
        {
            // Block
        PStatement pstatementNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtseqNode1 = new AStmtSeq(pstatementNode2, listNode4);
        }
	nodeList.add(pstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASimpleStmtStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PSimpleStmt psimplestmtNode2;
        psimplestmtNode2 = (PSimpleStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ASimpleStmtStatement(psimplestmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACompoundStmtStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCompoundStmt pcompoundstmtNode2;
        pcompoundstmtNode2 = (PCompoundStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ACompoundStmtStatement(pcompoundstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ANullStmtSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PNullStmt pnullstmtNode2;
        pnullstmtNode2 = (PNullStmt)nodeArrayList1.get(0);

        psimplestmtNode1 = new ANullStmtSimpleStmt(pnullstmtNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAssignStmtSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PAssignStmt passignstmtNode2;
        passignstmtNode2 = (PAssignStmt)nodeArrayList1.get(0);

        psimplestmtNode1 = new AAssignStmtSimpleStmt(passignstmtNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AProcCallStmtSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PProcCallStmt pproccallstmtNode2;
        pproccallstmtNode2 = (PProcCallStmt)nodeArrayList1.get(0);

        psimplestmtNode1 = new AProcCallStmtSimpleStmt(pproccallstmtNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AWriteSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PWriteStmt pwritestmtNode2;
        pwritestmtNode2 = (PWriteStmt)nodeArrayList1.get(0);

        psimplestmtNode1 = new AWriteSimpleStmt(pwritestmtNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIfCompoundCompoundStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStmt pcompoundstmtNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pcompoundstmtNode1 = new AIfCompoundCompoundStmt(pifstmtNode2);
        }
	nodeList.add(pcompoundstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALoopCompoundCompoundStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStmt pcompoundstmtNode1;
        {
            // Block
        PLoopStmt ploopstmtNode2;
        ploopstmtNode2 = (PLoopStmt)nodeArrayList1.get(0);

        pcompoundstmtNode1 = new ALoopCompoundCompoundStmt(ploopstmtNode2);
        }
	nodeList.add(pcompoundstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANullStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNullStmt pnullstmtNode1;
        {
            // Block
        TNull tnullNode2;
        TSemi tsemiNode3;
        tnullNode2 = (TNull)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pnullstmtNode1 = new ANullStmt(tnullNode2, tsemiNode3);
        }
	nodeList.add(pnullstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignStmt passignstmtNode1;
        {
            // Block
        TIdent tidentNode2;
        TGets tgetsNode3;
        PSimpleExpr psimpleexprNode4;
        TSemi tsemiNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tgetsNode3 = (TGets)nodeArrayList2.get(0);
        psimpleexprNode4 = (PSimpleExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        passignstmtNode1 = new AAssignStmt(tidentNode2, tgetsNode3, psimpleexprNode4, tsemiNode5);
        }
	nodeList.add(passignstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAwritewritestmt1WriteStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteStmt pwritestmtNode1;
        {
            // Block
        TWrite twriteNode2;
        TLParen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRParen trparenNode5;
        TSemi tsemiNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        trparenNode5 = (TRParen)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);

        pwritestmtNode1 = new AWriteWriteStmt(twriteNode2, tlparenNode3, null, trparenNode5, tsemiNode6);
        }
	nodeList.add(pwritestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAwritewritestmt2WriteStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteStmt pwritestmtNode1;
        {
            // Block
        TWrite twriteNode2;
        TLParen tlparenNode3;
        PWriteExpr pwriteexprNode4;
        TRParen trparenNode5;
        TSemi tsemiNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        pwriteexprNode4 = (PWriteExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pwritestmtNode1 = new AWriteWriteStmt(twriteNode2, tlparenNode3, pwriteexprNode4, trparenNode5, tsemiNode6);
        }
	nodeList.add(pwritestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAwritelnwritestmt1WriteStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteStmt pwritestmtNode1;
        {
            // Block
        TWriteln twritelnNode2;
        TLParen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRParen trparenNode5;
        TSemi tsemiNode6;
        twritelnNode2 = (TWriteln)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        trparenNode5 = (TRParen)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);

        pwritestmtNode1 = new AWritelnWriteStmt(twritelnNode2, tlparenNode3, null, trparenNode5, tsemiNode6);
        }
	nodeList.add(pwritestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAwritelnwritestmt2WriteStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteStmt pwritestmtNode1;
        {
            // Block
        TWriteln twritelnNode2;
        TLParen tlparenNode3;
        PWriteExpr pwriteexprNode4;
        TRParen trparenNode5;
        TSemi tsemiNode6;
        twritelnNode2 = (TWriteln)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        pwriteexprNode4 = (PWriteExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pwritestmtNode1 = new AWritelnWriteStmt(twritelnNode2, tlparenNode3, pwriteexprNode4, trparenNode5, tsemiNode6);
        }
	nodeList.add(pwritestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PRelation prelationNode3;
        TThen tthenNode4;
        PStmtSeq pstmtseqNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        TEndif tendifNode8;
        TSemi tsemiNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        prelationNode3 = (PRelation)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtseqNode5 = (PStmtSeq)nodeArrayList4.get(0);
        {
            // Block
        }
        tendifNode8 = (TEndif)nodeArrayList5.get(0);
        tsemiNode9 = (TSemi)nodeArrayList6.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, prelationNode3, tthenNode4, pstmtseqNode5, listNode6, null, tendifNode8, tsemiNode9);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PRelation prelationNode3;
        TThen tthenNode4;
        PStmtSeq pstmtseqNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TEndif tendifNode9;
        TSemi tsemiNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        prelationNode3 = (PRelation)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtseqNode5 = (PStmtSeq)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendifNode9 = (TEndif)nodeArrayList6.get(0);
        tsemiNode10 = (TSemi)nodeArrayList7.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, prelationNode3, tthenNode4, pstmtseqNode5, listNode7, null, tendifNode9, tsemiNode10);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAifstmt3IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PRelation prelationNode3;
        TThen tthenNode4;
        PStmtSeq pstmtseqNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PElseClause pelseclauseNode7;
        TEndif tendifNode8;
        TSemi tsemiNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        prelationNode3 = (PRelation)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtseqNode5 = (PStmtSeq)nodeArrayList4.get(0);
        {
            // Block
        }
        pelseclauseNode7 = (PElseClause)nodeArrayList5.get(0);
        tendifNode8 = (TEndif)nodeArrayList6.get(0);
        tsemiNode9 = (TSemi)nodeArrayList7.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, prelationNode3, tthenNode4, pstmtseqNode5, listNode6, pelseclauseNode7, tendifNode8, tsemiNode9);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAifstmt4IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PRelation prelationNode3;
        TThen tthenNode4;
        PStmtSeq pstmtseqNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PElseClause pelseclauseNode8;
        TEndif tendifNode9;
        TSemi tsemiNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        prelationNode3 = (PRelation)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtseqNode5 = (PStmtSeq)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        pelseclauseNode8 = (PElseClause)nodeArrayList6.get(0);
        tendifNode9 = (TEndif)nodeArrayList7.get(0);
        tsemiNode10 = (TSemi)nodeArrayList8.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, prelationNode3, tthenNode4, pstmtseqNode5, listNode7, pelseclauseNode8, tendifNode9, tsemiNode10);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AElseifClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseifClause pelseifclauseNode1;
        {
            // Block
        TElseif telseifNode2;
        PRelation prelationNode3;
        TThen tthenNode4;
        PStmtSeq pstmtseqNode5;
        telseifNode2 = (TElseif)nodeArrayList1.get(0);
        prelationNode3 = (PRelation)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtseqNode5 = (PStmtSeq)nodeArrayList4.get(0);

        pelseifclauseNode1 = new AElseifClause(telseifNode2, prelationNode3, tthenNode4, pstmtseqNode5);
        }
	nodeList.add(pelseifclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AElseClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseClause pelseclauseNode1;
        {
            // Block
        TElse telseNode2;
        PStmtSeq pstmtseqNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pstmtseqNode3 = (PStmtSeq)nodeArrayList2.get(0);

        pelseclauseNode1 = new AElseClause(telseNode2, pstmtseqNode3);
        }
	nodeList.add(pelseclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopStmt ploopstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PRelation prelationNode3;
        TLoop tloopNode4;
        PStmtSeq pstmtseqNode5;
        TEnd tendNode6;
        TLoop tloopNode7;
        TSemi tsemiNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        prelationNode3 = (PRelation)nodeArrayList2.get(0);
        tloopNode4 = (TLoop)nodeArrayList3.get(0);
        pstmtseqNode5 = (PStmtSeq)nodeArrayList4.get(0);
        tendNode6 = (TEnd)nodeArrayList5.get(0);
        tloopNode7 = (TLoop)nodeArrayList6.get(0);
        tsemiNode8 = (TSemi)nodeArrayList7.get(0);

        ploopstmtNode1 = new ALoopStmt(twhileNode2, prelationNode3, tloopNode4, pstmtseqNode5, tendNode6, tloopNode7, tsemiNode8);
        }
	nodeList.add(ploopstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAproccallstmt1ProcCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProcCallStmt pproccallstmtNode1;
        {
            // Block
        TIdent tidentNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemi tsemiNode4;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pproccallstmtNode1 = new AProcCallStmt(tidentNode2, null, tsemiNode4);
        }
	nodeList.add(pproccallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAproccallstmt2ProcCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProcCallStmt pproccallstmtNode1;
        {
            // Block
        TIdent tidentNode2;
        PActualParamPart pactualparampartNode3;
        TSemi tsemiNode4;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pactualparampartNode3 = (PActualParamPart)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pproccallstmtNode1 = new AProcCallStmt(tidentNode2, pactualparampartNode3, tsemiNode4);
        }
	nodeList.add(pproccallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAactualparampart1ActualParamPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PActualParamPart pactualparampartNode1;
        {
            // Block
        TLParen tlparenNode2;
        PSimpleExpr psimpleexprNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRParen trparenNode5;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        psimpleexprNode3 = (PSimpleExpr)nodeArrayList2.get(0);
        {
            // Block
        }
        trparenNode5 = (TRParen)nodeArrayList3.get(0);

        pactualparampartNode1 = new AActualParamPart(tlparenNode2, psimpleexprNode3, listNode4, trparenNode5);
        }
	nodeList.add(pactualparampartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAactualparampart2ActualParamPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PActualParamPart pactualparampartNode1;
        {
            // Block
        TLParen tlparenNode2;
        PSimpleExpr psimpleexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRParen trparenNode6;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        psimpleexprNode3 = (PSimpleExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparenNode6 = (TRParen)nodeArrayList4.get(0);

        pactualparampartNode1 = new AActualParamPart(tlparenNode2, psimpleexprNode3, listNode5, trparenNode6);
        }
	nodeList.add(pactualparampartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAnotherParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAnotherParam panotherparamNode1;
        {
            // Block
        TComma tcommaNode2;
        PSimpleExpr psimpleexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        psimpleexprNode3 = (PSimpleExpr)nodeArrayList2.get(0);

        panotherparamNode1 = new AAnotherParam(tcommaNode2, psimpleexprNode3);
        }
	nodeList.add(panotherparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AArelation1Relation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelation prelationNode1;
        {
            // Block
        PSimpleExpr psimpleexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        psimpleexprNode2 = (PSimpleExpr)nodeArrayList1.get(0);

        prelationNode1 = new ARelation(psimpleexprNode2, null);
        }
	nodeList.add(prelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AArelation2Relation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelation prelationNode1;
        {
            // Block
        PSimpleExpr psimpleexprNode2;
        PRelationClause prelationclauseNode3;
        psimpleexprNode2 = (PSimpleExpr)nodeArrayList1.get(0);
        prelationclauseNode3 = (PRelationClause)nodeArrayList2.get(0);

        prelationNode1 = new ARelation(psimpleexprNode2, prelationclauseNode3);
        }
	nodeList.add(prelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ARelationClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationClause prelationclauseNode1;
        {
            // Block
        PRelOp prelopNode2;
        PSimpleExpr psimpleexprNode3;
        prelopNode2 = (PRelOp)nodeArrayList1.get(0);
        psimpleexprNode3 = (PSimpleExpr)nodeArrayList2.get(0);

        prelationclauseNode1 = new ARelationClause(prelopNode2, psimpleexprNode3);
        }
	nodeList.add(prelationclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AStringLitWriteExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteExpr pwriteexprNode1;
        {
            // Block
        TStringLit tstringlitNode2;
        tstringlitNode2 = (TStringLit)nodeArrayList1.get(0);

        pwriteexprNode1 = new AStringLitWriteExpr(tstringlitNode2);
        }
	nodeList.add(pwriteexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASimpleExprWriteExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteExpr pwriteexprNode1;
        {
            // Block
        PSimpleExpr psimpleexprNode2;
        psimpleexprNode2 = (PSimpleExpr)nodeArrayList1.get(0);

        pwriteexprNode1 = new ASimpleExprWriteExpr(psimpleexprNode2);
        }
	nodeList.add(pwriteexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASimpleExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpr psimpleexprNode1;
        {
            // Block
        PTerm ptermNode2;
        PAddOp paddopNode3;
        PTerm ptermNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        paddopNode3 = (PAddOp)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psimpleexprNode1 = new ASimpleExpr(ptermNode2, paddopNode3, ptermNode4);
        }
	nodeList.add(psimpleexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ATermSimpleExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpr psimpleexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psimpleexprNode1 = new ATermSimpleExpr(ptermNode2);
        }
	nodeList.add(psimpleexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        PMulOp pmulopNode3;
        PFactor pfactorNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        pmulopNode3 = (PMulOp)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATerm(pfactorNode2, pmulopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AFactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);

        pfactorNode1 = new AFactorFactor(pprimaryNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANegPrimFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TMinus tminusNode2;
        PPrimary pprimaryNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pprimaryNode3 = (PPrimary)nodeArrayList2.get(0);

        pfactorNode1 = new ANegPrimFactor(tminusNode2, pprimaryNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANumLitPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TNumberLit tnumberlitNode2;
        tnumberlitNode2 = (TNumberLit)nodeArrayList1.get(0);

        pprimaryNode1 = new ANumLitPrimary(tnumberlitNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANamePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        pprimaryNode1 = new ANamePrimary(tidentNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExprPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TLParen tlparenNode2;
        PSimpleExpr psimpleexprNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        psimpleexprNode3 = (PSimpleExpr)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pprimaryNode1 = new AExprPrimary(tlparenNode2, psimpleexprNode3, trparenNode4);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AEqRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelOp prelopNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        prelopNode1 = new AEqRelOp(teqNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANeqRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelOp prelopNode1;
        {
            // Block
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        prelopNode1 = new ANeqRelOp(tneqNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ALtRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelOp prelopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        prelopNode1 = new ALtRelOp(tltNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ALeRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelOp prelopNode1;
        {
            // Block
        TLe tleNode2;
        tleNode2 = (TLe)nodeArrayList1.get(0);

        prelopNode1 = new ALeRelOp(tleNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AGtRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelOp prelopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        prelopNode1 = new AGtRelOp(tgtNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AGeRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelOp prelopNode1;
        {
            // Block
        TGe tgeNode2;
        tgeNode2 = (TGe)nodeArrayList1.get(0);

        prelopNode1 = new AGeRelOp(tgeNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce APlusAddOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddOp paddopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        paddopNode1 = new APlusAddOp(tplusNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMinusAddOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddOp paddopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        paddopNode1 = new AMinusAddOp(tminusNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AMultMulOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulOp pmulopNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pmulopNode1 = new AMultMulOp(tmultNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ADivMulOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulOp pmulopNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pmulopNode1 = new ADivMulOp(tdivNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AModMulOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulOp pmulopNode1;
        {
            // Block
        TMod tmodNode2;
        tmodNode2 = (TMod)nodeArrayList1.get(0);

        pmulopNode1 = new AModMulOp(tmodNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATerminal$BasicDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBasicDecl pbasicdeclNode1;
        pbasicdeclNode1 = (PBasicDecl)nodeArrayList1.get(0);
	if(pbasicdeclNode1 != null)
	{
	  listNode2.add(pbasicdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ANonTerminal$BasicDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBasicDecl pbasicdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbasicdeclNode2 = (PBasicDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbasicdeclNode2 != null)
	{
	  listNode3.add(pbasicdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$AnotherIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAnotherIdent panotheridentNode1;
        panotheridentNode1 = (PAnotherIdent)nodeArrayList1.get(0);
	if(panotheridentNode1 != null)
	{
	  listNode2.add(panotheridentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$AnotherIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAnotherIdent panotheridentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        panotheridentNode2 = (PAnotherIdent)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(panotheridentNode2 != null)
	{
	  listNode3.add(panotheridentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$AnotherParamSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAnotherParamSpec panotherparamspecNode1;
        panotherparamspecNode1 = (PAnotherParamSpec)nodeArrayList1.get(0);
	if(panotherparamspecNode1 != null)
	{
	  listNode2.add(panotherparamspecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$AnotherParamSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAnotherParamSpec panotherparamspecNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        panotherparamspecNode2 = (PAnotherParamSpec)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(panotherparamspecNode2 != null)
	{
	  listNode3.add(panotherparamspecNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$ElseifClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseifClause pelseifclauseNode1;
        pelseifclauseNode1 = (PElseifClause)nodeArrayList1.get(0);
	if(pelseifclauseNode1 != null)
	{
	  listNode2.add(pelseifclauseNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$ElseifClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseifClause pelseifclauseNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelseifclauseNode2 = (PElseifClause)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelseifclauseNode2 != null)
	{
	  listNode3.add(pelseifclauseNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$AnotherParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAnotherParam panotherparamNode1;
        panotherparamNode1 = (PAnotherParam)nodeArrayList1.get(0);
	if(panotherparamNode1 != null)
	{
	  listNode2.add(panotherparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$AnotherParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAnotherParam panotherparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        panotherparamNode2 = (PAnotherParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(panotherparamNode2 != null)
	{
	  listNode3.add(panotherparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {34, SHIFT, 5}, },
			{{-1, ERROR, 2}, {37, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {13, SHIFT, 6}, },
			{{-1, REDUCE, 14}, {16, SHIFT, 7}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, {34, SHIFT, 9}, },
			{{-1, ERROR, 7}, {34, SHIFT, 9}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 10}, {21, SHIFT, 19}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 11}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 15}, {20, SHIFT, 23}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 1}, {34, SHIFT, 9}, },
			{{-1, ERROR, 17}, {20, SHIFT, 25}, },
			{{-1, ERROR, 18}, {17, SHIFT, 26}, {21, SHIFT, 27}, },
			{{-1, ERROR, 19}, {34, SHIFT, 30}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 11}, {21, SHIFT, 19}, },
			{{-1, ERROR, 22}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, ERROR, 23}, {11, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 25}, {12, SHIFT, 50}, {34, SHIFT, 51}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 27}, {34, SHIFT, 9}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 29}, {17, SHIFT, 53}, {21, SHIFT, 27}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 32}, {19, SHIFT, 55}, },
			{{-1, ERROR, 33}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, ERROR, 34}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, ERROR, 35}, {16, SHIFT, 66}, },
			{{-1, ERROR, 36}, {16, SHIFT, 67}, },
			{{-1, ERROR, 37}, {16, SHIFT, 68}, {19, SHIFT, 69}, {33, SHIFT, 70}, },
			{{-1, ERROR, 38}, {9, SHIFT, 72}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 48}, {33, SHIFT, 75}, },
			{{-1, ERROR, 49}, {19, SHIFT, 76}, },
			{{-1, ERROR, 50}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 56}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, ERROR, 57}, {16, SHIFT, 56}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 60}, {3, SHIFT, 80}, },
			{{-1, REDUCE, 49}, {27, SHIFT, 81}, {28, SHIFT, 82}, {29, SHIFT, 83}, {30, SHIFT, 84}, {31, SHIFT, 85}, {32, SHIFT, 86}, },
			{{-1, REDUCE, 55}, {22, SHIFT, 89}, {23, SHIFT, 90}, },
			{{-1, REDUCE, 57}, {24, SHIFT, 92}, {25, SHIFT, 93}, {26, SHIFT, 94}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 65}, {6, SHIFT, 96}, },
			{{-1, ERROR, 66}, {16, SHIFT, 56}, {17, SHIFT, 97}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, {36, SHIFT, 98}, },
			{{-1, ERROR, 67}, {16, SHIFT, 56}, {17, SHIFT, 101}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, {36, SHIFT, 98}, },
			{{-1, ERROR, 68}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 70}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, ERROR, 71}, {19, SHIFT, 105}, },
			{{-1, ERROR, 72}, {19, SHIFT, 106}, {34, SHIFT, 107}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 22}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, ERROR, 75}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 78}, {17, SHIFT, 110}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 80}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 88}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 91}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 95}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, ERROR, 96}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, ERROR, 97}, {19, SHIFT, 116}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 99}, {17, SHIFT, 117}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 101}, {19, SHIFT, 118}, },
			{{-1, ERROR, 102}, {17, SHIFT, 119}, },
			{{-1, ERROR, 103}, {17, SHIFT, 120}, {21, SHIFT, 121}, },
			{{-1, ERROR, 104}, {19, SHIFT, 124}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 107}, {19, SHIFT, 125}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 109}, {19, SHIFT, 126}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 111}, {4, SHIFT, 127}, {5, SHIFT, 128}, {10, SHIFT, 129}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 115}, {9, SHIFT, 133}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 117}, {19, SHIFT, 134}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 119}, {19, SHIFT, 135}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 121}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 123}, {17, SHIFT, 137}, {21, SHIFT, 121}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 127}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, ERROR, 128}, {16, SHIFT, 56}, {23, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 59}, },
			{{-1, ERROR, 129}, {19, SHIFT, 141}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 131}, {10, SHIFT, 142}, },
			{{-1, ERROR, 132}, {4, SHIFT, 127}, {5, SHIFT, 128}, {10, SHIFT, 143}, },
			{{-1, ERROR, 133}, {6, SHIFT, 146}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 140}, {3, SHIFT, 147}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 142}, {19, SHIFT, 148}, },
			{{-1, ERROR, 143}, {19, SHIFT, 149}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 145}, {10, SHIFT, 150}, },
			{{-1, ERROR, 146}, {19, SHIFT, 151}, },
			{{-1, ERROR, 147}, {1, SHIFT, 32}, {2, SHIFT, 33}, {7, SHIFT, 34}, {14, SHIFT, 35}, {15, SHIFT, 36}, {34, SHIFT, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 150}, {19, SHIFT, 153}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 40}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, {0, 3}, },
			{{-1, 11}, },
			{{-1, 12}, {16, 24}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 15}, {7, 17}, {27, 17}, },
			{{-1, 20}, {21, 31}, },
			{{-1, -1}, },
			{{-1, 4}, },
			{{-1, 8}, },
			{{-1, 18}, {27, 52}, },
			{{-1, 28}, {29, 54}, },
			{{-1, 38}, {80, 111}, {96, 115}, {127, 139}, {147, 152}, },
			{{-1, 39}, {39, 73}, {74, 108}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 130}, {132, 144}, },
			{{-1, 131}, {132, 145}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 71}, },
			{{-1, 122}, {123, 138}, },
			{{-1, 60}, {34, 65}, {128, 140}, },
			{{-1, 87}, },
			{{-1, 99}, {67, 102}, },
			{{-1, 61}, {56, 78}, {66, 100}, {67, 100}, {68, 103}, {70, 104}, {75, 109}, {88, 112}, {121, 136}, },
			{{-1, 62}, {91, 113}, },
			{{-1, 63}, {95, 114}, },
			{{-1, 64}, {57, 79}, },
			{{-1, 88}, },
			{{-1, 91}, },
			{{-1, 95}, },
			{{-1, 16}, },
			{{-1, 21}, },
			{{-1, 29}, },
			{{-1, 74}, },
			{{-1, 132}, },
			{{-1, 123}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: proc",
			"expecting: ident",
			"expecting: EOF",
			"expecting: is",
			"expecting: is, '('",
			"expecting: proc, begin, ident",
			"expecting: ':', ','",
			"expecting: begin",
			"expecting: ':'",
			"expecting: ')', ','",
			"expecting: null, if, while, write, writeln, ident",
			"expecting: const, ident",
			"expecting: out, ident",
			"expecting: ';'",
			"expecting: '(', '-', ident, number lit",
			"expecting: '('",
			"expecting: '(', ';', ':='",
			"expecting: end",
			"expecting: null, if, else, elseif, while, end, endif, write, writeln, ident",
			"expecting: ':='",
			"expecting: '(', ident, number lit",
			"expecting: then, loop, ')', ';', ',', '+', '-', '*', '/', mod, '<', '>', '<=', '>=', '=', '/='",
			"expecting: then",
			"expecting: then, loop, '<', '>', '<=', '>=', '=', '/='",
			"expecting: then, loop, ')', ';', ',', '+', '-', '<', '>', '<=', '>=', '=', '/='",
			"expecting: loop",
			"expecting: '(', ')', '-', ident, number lit, string lit",
			"expecting: ';', ident",
			"expecting: ')'",
			"expecting: then, loop",
			"expecting: proc, begin, ident, EOF",
			"expecting: else, elseif, endif",
			"expecting: then, loop, ')', ';', ',', '<', '>', '<=', '>=', '=', '/='",
			"expecting: endif",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 1, 3, 6, 5, 7, 5, 5, 5, 8, 5, 8, 9, 1, 6, 6, 10, 11, 5, 12, 3, 1, 9, 9, 6, 6, 13, 14, 14, 15, 15, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 13, 1, 9, 9, 3, 9, 18, 14, 20, 21, 21, 22, 23, 24, 21, 21, 25, 26, 26, 14, 18, 14, 13, 27, 18, 18, 14, 5, 9, 28, 21, 10, 14, 14, 14, 14, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 10, 13, 28, 28, 28, 13, 28, 9, 13, 18, 30, 13, 18, 13, 21, 31, 29, 32, 24, 17, 18, 13, 18, 13, 13, 14, 9, 9, 18, 30, 5, 10, 14, 13, 31, 33, 31, 25, 18, 18, 9, 13, 9, 33, 22, 18, 13, 13, 31, 33, 13, 10, 18, 18, 13, 18, 31, 18, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
