/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import nada.analysis.*;

@SuppressWarnings("nls")
public final class ASubprogramSpec extends PSubprogramSpec
{
    private TProc _proc_;
    private TIdent _ident_;
    private PFormalPart _formalPart_;

    public ASubprogramSpec()
    {
        // Constructor
    }

    public ASubprogramSpec(
        @SuppressWarnings("hiding") TProc _proc_,
        @SuppressWarnings("hiding") TIdent _ident_,
        @SuppressWarnings("hiding") PFormalPart _formalPart_)
    {
        // Constructor
        setProc(_proc_);

        setIdent(_ident_);

        setFormalPart(_formalPart_);

    }

    @Override
    public Object clone()
    {
        return new ASubprogramSpec(
            cloneNode(this._proc_),
            cloneNode(this._ident_),
            cloneNode(this._formalPart_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubprogramSpec(this);
    }

    public TProc getProc()
    {
        return this._proc_;
    }

    public void setProc(TProc node)
    {
        if(this._proc_ != null)
        {
            this._proc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proc_ = node;
    }

    public TIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(TIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public PFormalPart getFormalPart()
    {
        return this._formalPart_;
    }

    public void setFormalPart(PFormalPart node)
    {
        if(this._formalPart_ != null)
        {
            this._formalPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalPart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._proc_)
            + toString(this._ident_)
            + toString(this._formalPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._proc_ == child)
        {
            this._proc_ = null;
            return;
        }

        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._formalPart_ == child)
        {
            this._formalPart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._proc_ == oldChild)
        {
            setProc((TProc) newChild);
            return;
        }

        if(this._ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        if(this._formalPart_ == oldChild)
        {
            setFormalPart((PFormalPart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
