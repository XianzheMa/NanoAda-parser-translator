/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import java.util.*;
import nada.analysis.*;

@SuppressWarnings("nls")
public final class AIdentList extends PIdentList
{
    private TIdent _ident_;
    private final LinkedList<PAnotherIdent> _anotherIdent_ = new LinkedList<PAnotherIdent>();

    public AIdentList()
    {
        // Constructor
    }

    public AIdentList(
        @SuppressWarnings("hiding") TIdent _ident_,
        @SuppressWarnings("hiding") List<?> _anotherIdent_)
    {
        // Constructor
        setIdent(_ident_);

        setAnotherIdent(_anotherIdent_);

    }

    @Override
    public Object clone()
    {
        return new AIdentList(
            cloneNode(this._ident_),
            cloneList(this._anotherIdent_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentList(this);
    }

    public TIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(TIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public LinkedList<PAnotherIdent> getAnotherIdent()
    {
        return this._anotherIdent_;
    }

    public void setAnotherIdent(List<?> list)
    {
        for(PAnotherIdent e : this._anotherIdent_)
        {
            e.parent(null);
        }
        this._anotherIdent_.clear();

        for(Object obj_e : list)
        {
            PAnotherIdent e = (PAnotherIdent) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._anotherIdent_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ident_)
            + toString(this._anotherIdent_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._anotherIdent_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        for(ListIterator<PAnotherIdent> i = this._anotherIdent_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAnotherIdent) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
