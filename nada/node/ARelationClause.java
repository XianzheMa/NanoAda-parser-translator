/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import nada.analysis.*;

@SuppressWarnings("nls")
public final class ARelationClause extends PRelationClause
{
    private PRelOp _relOp_;
    private PSimpleExpr _simpleExpr_;

    public ARelationClause()
    {
        // Constructor
    }

    public ARelationClause(
        @SuppressWarnings("hiding") PRelOp _relOp_,
        @SuppressWarnings("hiding") PSimpleExpr _simpleExpr_)
    {
        // Constructor
        setRelOp(_relOp_);

        setSimpleExpr(_simpleExpr_);

    }

    @Override
    public Object clone()
    {
        return new ARelationClause(
            cloneNode(this._relOp_),
            cloneNode(this._simpleExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelationClause(this);
    }

    public PRelOp getRelOp()
    {
        return this._relOp_;
    }

    public void setRelOp(PRelOp node)
    {
        if(this._relOp_ != null)
        {
            this._relOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relOp_ = node;
    }

    public PSimpleExpr getSimpleExpr()
    {
        return this._simpleExpr_;
    }

    public void setSimpleExpr(PSimpleExpr node)
    {
        if(this._simpleExpr_ != null)
        {
            this._simpleExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._relOp_)
            + toString(this._simpleExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._relOp_ == child)
        {
            this._relOp_ = null;
            return;
        }

        if(this._simpleExpr_ == child)
        {
            this._simpleExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._relOp_ == oldChild)
        {
            setRelOp((PRelOp) newChild);
            return;
        }

        if(this._simpleExpr_ == oldChild)
        {
            setSimpleExpr((PSimpleExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
