/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import nada.analysis.*;

@SuppressWarnings("nls")
public final class ARelation extends PRelation
{
    private PSimpleExpr _simpleExpr_;
    private PRelationClause _relationClause_;

    public ARelation()
    {
        // Constructor
    }

    public ARelation(
        @SuppressWarnings("hiding") PSimpleExpr _simpleExpr_,
        @SuppressWarnings("hiding") PRelationClause _relationClause_)
    {
        // Constructor
        setSimpleExpr(_simpleExpr_);

        setRelationClause(_relationClause_);

    }

    @Override
    public Object clone()
    {
        return new ARelation(
            cloneNode(this._simpleExpr_),
            cloneNode(this._relationClause_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelation(this);
    }

    public PSimpleExpr getSimpleExpr()
    {
        return this._simpleExpr_;
    }

    public void setSimpleExpr(PSimpleExpr node)
    {
        if(this._simpleExpr_ != null)
        {
            this._simpleExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpr_ = node;
    }

    public PRelationClause getRelationClause()
    {
        return this._relationClause_;
    }

    public void setRelationClause(PRelationClause node)
    {
        if(this._relationClause_ != null)
        {
            this._relationClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relationClause_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleExpr_)
            + toString(this._relationClause_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleExpr_ == child)
        {
            this._simpleExpr_ = null;
            return;
        }

        if(this._relationClause_ == child)
        {
            this._relationClause_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleExpr_ == oldChild)
        {
            setSimpleExpr((PSimpleExpr) newChild);
            return;
        }

        if(this._relationClause_ == oldChild)
        {
            setRelationClause((PRelationClause) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
