/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import java.util.*;
import nada.analysis.*;

@SuppressWarnings("nls")
public final class AIfStmt extends PIfStmt
{
    private TIf _if_;
    private PRelation _relation_;
    private TThen _then_;
    private PStmtSeq _stmtSeq_;
    private final LinkedList<PElseifClause> _elseifClause_ = new LinkedList<PElseifClause>();
    private PElseClause _elseClause_;
    private TEndif _endif_;
    private TSemi _semi_;

    public AIfStmt()
    {
        // Constructor
    }

    public AIfStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PRelation _relation_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PStmtSeq _stmtSeq_,
        @SuppressWarnings("hiding") List<?> _elseifClause_,
        @SuppressWarnings("hiding") PElseClause _elseClause_,
        @SuppressWarnings("hiding") TEndif _endif_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setIf(_if_);

        setRelation(_relation_);

        setThen(_then_);

        setStmtSeq(_stmtSeq_);

        setElseifClause(_elseifClause_);

        setElseClause(_elseClause_);

        setEndif(_endif_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AIfStmt(
            cloneNode(this._if_),
            cloneNode(this._relation_),
            cloneNode(this._then_),
            cloneNode(this._stmtSeq_),
            cloneList(this._elseifClause_),
            cloneNode(this._elseClause_),
            cloneNode(this._endif_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PRelation getRelation()
    {
        return this._relation_;
    }

    public void setRelation(PRelation node)
    {
        if(this._relation_ != null)
        {
            this._relation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relation_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PStmtSeq getStmtSeq()
    {
        return this._stmtSeq_;
    }

    public void setStmtSeq(PStmtSeq node)
    {
        if(this._stmtSeq_ != null)
        {
            this._stmtSeq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtSeq_ = node;
    }

    public LinkedList<PElseifClause> getElseifClause()
    {
        return this._elseifClause_;
    }

    public void setElseifClause(List<?> list)
    {
        for(PElseifClause e : this._elseifClause_)
        {
            e.parent(null);
        }
        this._elseifClause_.clear();

        for(Object obj_e : list)
        {
            PElseifClause e = (PElseifClause) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elseifClause_.add(e);
        }
    }

    public PElseClause getElseClause()
    {
        return this._elseClause_;
    }

    public void setElseClause(PElseClause node)
    {
        if(this._elseClause_ != null)
        {
            this._elseClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseClause_ = node;
    }

    public TEndif getEndif()
    {
        return this._endif_;
    }

    public void setEndif(TEndif node)
    {
        if(this._endif_ != null)
        {
            this._endif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endif_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._relation_)
            + toString(this._then_)
            + toString(this._stmtSeq_)
            + toString(this._elseifClause_)
            + toString(this._elseClause_)
            + toString(this._endif_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._relation_ == child)
        {
            this._relation_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._stmtSeq_ == child)
        {
            this._stmtSeq_ = null;
            return;
        }

        if(this._elseifClause_.remove(child))
        {
            return;
        }

        if(this._elseClause_ == child)
        {
            this._elseClause_ = null;
            return;
        }

        if(this._endif_ == child)
        {
            this._endif_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._relation_ == oldChild)
        {
            setRelation((PRelation) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._stmtSeq_ == oldChild)
        {
            setStmtSeq((PStmtSeq) newChild);
            return;
        }

        for(ListIterator<PElseifClause> i = this._elseifClause_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PElseifClause) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseClause_ == oldChild)
        {
            setElseClause((PElseClause) newChild);
            return;
        }

        if(this._endif_ == oldChild)
        {
            setEndif((TEndif) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
