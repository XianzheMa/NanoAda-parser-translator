/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import nada.analysis.*;

@SuppressWarnings("nls")
public final class ANumberDecl extends PNumberDecl
{
    private PIdentList _identList_;
    private TColon _colon_;
    private TConst _const_;
    private TGets _gets_;
    private PSimpleExpr _simpleExpr_;
    private TSemi _semi_;

    public ANumberDecl()
    {
        // Constructor
    }

    public ANumberDecl(
        @SuppressWarnings("hiding") PIdentList _identList_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") TConst _const_,
        @SuppressWarnings("hiding") TGets _gets_,
        @SuppressWarnings("hiding") PSimpleExpr _simpleExpr_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setIdentList(_identList_);

        setColon(_colon_);

        setConst(_const_);

        setGets(_gets_);

        setSimpleExpr(_simpleExpr_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new ANumberDecl(
            cloneNode(this._identList_),
            cloneNode(this._colon_),
            cloneNode(this._const_),
            cloneNode(this._gets_),
            cloneNode(this._simpleExpr_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumberDecl(this);
    }

    public PIdentList getIdentList()
    {
        return this._identList_;
    }

    public void setIdentList(PIdentList node)
    {
        if(this._identList_ != null)
        {
            this._identList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identList_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public TConst getConst()
    {
        return this._const_;
    }

    public void setConst(TConst node)
    {
        if(this._const_ != null)
        {
            this._const_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._const_ = node;
    }

    public TGets getGets()
    {
        return this._gets_;
    }

    public void setGets(TGets node)
    {
        if(this._gets_ != null)
        {
            this._gets_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gets_ = node;
    }

    public PSimpleExpr getSimpleExpr()
    {
        return this._simpleExpr_;
    }

    public void setSimpleExpr(PSimpleExpr node)
    {
        if(this._simpleExpr_ != null)
        {
            this._simpleExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpr_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identList_)
            + toString(this._colon_)
            + toString(this._const_)
            + toString(this._gets_)
            + toString(this._simpleExpr_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identList_ == child)
        {
            this._identList_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._const_ == child)
        {
            this._const_ = null;
            return;
        }

        if(this._gets_ == child)
        {
            this._gets_ = null;
            return;
        }

        if(this._simpleExpr_ == child)
        {
            this._simpleExpr_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identList_ == oldChild)
        {
            setIdentList((PIdentList) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._const_ == oldChild)
        {
            setConst((TConst) newChild);
            return;
        }

        if(this._gets_ == oldChild)
        {
            setGets((TGets) newChild);
            return;
        }

        if(this._simpleExpr_ == oldChild)
        {
            setSimpleExpr((PSimpleExpr) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
