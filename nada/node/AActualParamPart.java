/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import java.util.*;
import nada.analysis.*;

@SuppressWarnings("nls")
public final class AActualParamPart extends PActualParamPart
{
    private TLParen _lParen_;
    private PSimpleExpr _simpleExpr_;
    private final LinkedList<PAnotherParam> _anotherParam_ = new LinkedList<PAnotherParam>();
    private TRParen _rParen_;

    public AActualParamPart()
    {
        // Constructor
    }

    public AActualParamPart(
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PSimpleExpr _simpleExpr_,
        @SuppressWarnings("hiding") List<?> _anotherParam_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setLParen(_lParen_);

        setSimpleExpr(_simpleExpr_);

        setAnotherParam(_anotherParam_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new AActualParamPart(
            cloneNode(this._lParen_),
            cloneNode(this._simpleExpr_),
            cloneList(this._anotherParam_),
            cloneNode(this._rParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAActualParamPart(this);
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PSimpleExpr getSimpleExpr()
    {
        return this._simpleExpr_;
    }

    public void setSimpleExpr(PSimpleExpr node)
    {
        if(this._simpleExpr_ != null)
        {
            this._simpleExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpr_ = node;
    }

    public LinkedList<PAnotherParam> getAnotherParam()
    {
        return this._anotherParam_;
    }

    public void setAnotherParam(List<?> list)
    {
        for(PAnotherParam e : this._anotherParam_)
        {
            e.parent(null);
        }
        this._anotherParam_.clear();

        for(Object obj_e : list)
        {
            PAnotherParam e = (PAnotherParam) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._anotherParam_.add(e);
        }
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lParen_)
            + toString(this._simpleExpr_)
            + toString(this._anotherParam_)
            + toString(this._rParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._simpleExpr_ == child)
        {
            this._simpleExpr_ = null;
            return;
        }

        if(this._anotherParam_.remove(child))
        {
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._simpleExpr_ == oldChild)
        {
            setSimpleExpr((PSimpleExpr) newChild);
            return;
        }

        for(ListIterator<PAnotherParam> i = this._anotherParam_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAnotherParam) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
