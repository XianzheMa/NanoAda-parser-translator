/* This file was generated by SableCC (http://www.sablecc.org/). */

package nada.node;

import java.util.*;
import nada.analysis.*;

@SuppressWarnings("nls")
public final class AFormalPart extends PFormalPart
{
    private TLParen _lParen_;
    private PParamSpec _paramSpec_;
    private final LinkedList<PAnotherParamSpec> _anotherParamSpec_ = new LinkedList<PAnotherParamSpec>();
    private TRParen _rParen_;

    public AFormalPart()
    {
        // Constructor
    }

    public AFormalPart(
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PParamSpec _paramSpec_,
        @SuppressWarnings("hiding") List<?> _anotherParamSpec_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setLParen(_lParen_);

        setParamSpec(_paramSpec_);

        setAnotherParamSpec(_anotherParamSpec_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new AFormalPart(
            cloneNode(this._lParen_),
            cloneNode(this._paramSpec_),
            cloneList(this._anotherParamSpec_),
            cloneNode(this._rParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalPart(this);
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PParamSpec getParamSpec()
    {
        return this._paramSpec_;
    }

    public void setParamSpec(PParamSpec node)
    {
        if(this._paramSpec_ != null)
        {
            this._paramSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramSpec_ = node;
    }

    public LinkedList<PAnotherParamSpec> getAnotherParamSpec()
    {
        return this._anotherParamSpec_;
    }

    public void setAnotherParamSpec(List<?> list)
    {
        for(PAnotherParamSpec e : this._anotherParamSpec_)
        {
            e.parent(null);
        }
        this._anotherParamSpec_.clear();

        for(Object obj_e : list)
        {
            PAnotherParamSpec e = (PAnotherParamSpec) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._anotherParamSpec_.add(e);
        }
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lParen_)
            + toString(this._paramSpec_)
            + toString(this._anotherParamSpec_)
            + toString(this._rParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._paramSpec_ == child)
        {
            this._paramSpec_ = null;
            return;
        }

        if(this._anotherParamSpec_.remove(child))
        {
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._paramSpec_ == oldChild)
        {
            setParamSpec((PParamSpec) newChild);
            return;
        }

        for(ListIterator<PAnotherParamSpec> i = this._anotherParamSpec_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAnotherParamSpec) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
